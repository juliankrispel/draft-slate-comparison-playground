{"version":3,"sources":["slate/2.tsx","utils/toDataUrl.ts","draft/4.tsx","slate/4.tsx","App.tsx","draft/1.tsx","draft/2.tsx","draft/3.tsx","slate/1.tsx","slate/3.tsx","index.tsx"],"names":["styles","b","fontWeight","i","fontStyle","u","textDecoration","toDataURL","file","a","Promise","resolve","reject","reader","FileReader","addEventListener","result","readAsDataURL","Image","props","block","contentState","key","getEntityAt","data","getEntity","getData","src","alt","name","contentEditable","Element","attributes","children","element","type","ImageElement","imageStore","selected","useSelected","focused","useFocused","entity","className","css","draft","React","useState","EditorState","createWithContent","ContentState","createFromText","editorState","setEditorState","onChange","handleKeyCommand","useCallback","command","newState","RichUtils","onClick","getSelection","getAnchorKey","getCurrentContent","getBlockForKey","push","Modifier","setBlockType","getType","blockRendererFn","console","log","component","handleDroppedFiles","selection","files","length","entityKey","createEntity","getLastCreatedEntityKey","AtomicBlockUtils","insertAtomicBlock","setTimeout","dataurl","mergeEntityData","convertToRaw","slate","editor","useMemo","withReact","createEditor","text","value","setValue","newValue","onKeyDown","metaKey","marks","Editor","removeMark","addMark","renderLeaf","leaf","rest","style","Object","keys","reduce","acc","renderElement","Transforms","setNodes","withHistory","setImageStore","insertData","image","insertNodes","insertImage","onDrop","steps","App","map","s","to","D","path","S","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21f4dac7.chunk.js","sourcesContent":["import React, { CSSProperties, useCallback } from 'react'\nimport { useMemo, useState } from \"react\"\nimport { Editable, RenderLeafProps, Slate, withReact } from 'slate-react'\nimport { createEditor, Editor, Node } from \"slate\"\n\nconst styles: {[key: string]: CSSProperties } = {\n  b: { fontWeight: 'bold' },\n  i: { fontStyle: 'italic' },\n  u: { textDecoration: 'underline' }\n}\n\nexport function S2() {\n  const editor = useMemo(() => withReact(createEditor()), [])\n  const [value, setValue] = useState<Node[]>([{\n    children: [{\n      text: 'Hello Slate'\n    }]\n  }])\n\n  const onKeyDown = useCallback(({ key, metaKey }) => {\n    const marks = Editor.marks(editor) || {}\n\n    if (metaKey == null || styles[key] == null) {\n      return\n    }\n\n    if (marks[key] != null) {\n      Editor.removeMark(editor, key)\n    } else {\n      Editor.addMark(editor, key, true)\n    }\n  }, [editor]);\n\n\n  const renderLeaf = useCallback((props: RenderLeafProps) => {\n    const { text, ...rest } = props.leaf\n    const style = Object.keys(rest).reduce(\n      (acc, key) => ({ ...acc, ...styles[key] }),\n      {}\n    );\n\n    return <span {...props.attributes} style={style}>\n      {props.children}\n    </span>\n  }, [])\n\n  console.log({ value })\n\n  return <Slate\n      editor={editor}\n      value={value}\n      onChange={newValue => setValue(newValue)}\n    >\n      <Editable\n        onKeyDown={onKeyDown}\n        renderLeaf={renderLeaf}\n      />\n    </Slate>\n}\n","export async function toDataURL(file: File) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.addEventListener('loadend', () => {\n      resolve(reader.result)\n    })\n    reader.readAsDataURL(file)\n    reader.addEventListener('abort', reject)\n    reader.addEventListener('error', reject)\n  })\n}\n","import React, { useCallback } from 'react';\nimport {ContentState, Editor, EditorState, DraftHandleValue, AtomicBlockUtils, ContentBlock, convertToRaw} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { toDataURL } from '../utils/toDataUrl';\n\nfunction Image(props: any) {\n  const block = props.block as ContentBlock\n  const contentState = props.contentState as ContentState\n  const key = block.getEntityAt(0)\n  const ent = contentState.getEntity(key)\n  const data = ent.getData()\n  if (!data.src) {\n    return <div contentEditable={false}>\n      Loading {data.name}\n    </div>\n  }\n  return <div>\n    <img alt={data.name} src={data.src}/>\n  </div>\n}\n\nexport function D4() {\n  const [editorState, setEditorState] = React.useState(\n    () => EditorState.createWithContent(ContentState.createFromText('Hello there\\nDrop an image please')),\n  );\n\n  const handleDroppedFiles = useCallback((selection, files: File[]) => {\n    if (files != null && files.length > 0) {\n      for (const file of files) {\n        let contentState = editorState.getCurrentContent()\n        contentState = contentState.createEntity(\n          'image',\n          'IMMUTABLE',\n          {\n            name: file.name,\n            src: null\n          }\n        )\n\n        const entityKey = contentState.getLastCreatedEntityKey()\n\n        setEditorState(AtomicBlockUtils.insertAtomicBlock(\n          EditorState.push(\n            editorState,\n            contentState,\n            'apply-entity'\n          ),\n          entityKey,\n          ' '\n        ))\n\n        setTimeout(async () => {\n          const dataurl = await toDataURL(file)\n          contentState.mergeEntityData(\n            entityKey,\n            { src: dataurl}\n          )\n          // just wrapping this in a timeout for demo purposes\n        }, 2000)\n      }\n      return 'handled'\n    }\n\n    return 'not-handled' as DraftHandleValue\n  }, [editorState])\n\n  const blockRendererFn = useCallback((block) => {\n    console.log(\"hello\", block.getType());\n    if (block.getType() === \"atomic\") {\n      return {\n        component: Image,\n      };\n    }\n    console.log(block.getType());\n  }, []);\n\n  // Modifier.setBlockType(content)\n  \n  console.log(convertToRaw(editorState.getCurrentContent()))\n\n  return <Editor\n    handleDroppedFiles={handleDroppedFiles}\n    blockRendererFn={blockRendererFn}\n    editorState={editorState} onChange={setEditorState}\n  />\n}\n","import React, {  } from 'react'\nimport { useMemo, useState } from \"react\"\nimport { Editable, RenderElementProps, Slate, useFocused, useSelected, withReact } from 'slate-react'\nimport { createEditor, Editor, Node, Transforms } from \"slate\"\nimport { withHistory } from 'slate-history'\nimport { css } from '@emotion/css'\nimport { toDataURL } from '../utils/toDataUrl'\n\ntype ElementProps = RenderElementProps & {\n  imageStore: {\n    [key: string]: string | null\n  }\n}\n\nconst Element = (props: ElementProps) => {\n  const { attributes, children, element } = props\n\n  switch (element.type) {\n    case 'image':\n      return <ImageElement {...props} />\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst ImageElement = ({ attributes, children, element, imageStore }: ElementProps) => {\n  const selected = useSelected()\n  const focused = useFocused()\n  const src = imageStore[element.entity as string]\n  if (!src) {\n    return <div {...attributes}>\n      <div contentEditable={false}>\n        Loading\n      </div>\n      {children}\n    </div>\n  }\n\n  return (\n    <div {...attributes}>\n      <div contentEditable={false}>\n        <img\n          alt=\"Cat\"\n          src={src}\n          className={css`\n            display: block;\n            max-width: 100%;\n            max-height: 20em;\n            box-shadow: ${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'};\n          `}\n        />\n      </div>\n      {children}\n    </div>\n  )\n}\n\nconst insertImage = (editor: Editor, entity: string) => {\n  const text = { text: '' }\n  const image = { type: 'image', entity, children: [text] }\n  Transforms.insertNodes(editor, image)\n}\n\nexport function S4() {\n  const editor = useMemo(() => withReact(withHistory(createEditor())), [])\n  const [imageStore, setImageStore] = useState({})\n\n  const [value, setValue] = useState<Node[]>([\n    {\n      children: [\n        {\n          text: \"Hello there\",\n        },\n      ],\n    },\n    {\n      children: [\n        {\n          text: \"Drop an image here please\",\n        },\n      ],\n    },\n  ]);\n\n  editor.insertData = data => {\n    const { files } = data\n\n    if (files && files.length > 0) {\n      for (const file of files) {\n        setImageStore({\n          ...imageStore,\n          [file.name]: null\n        })\n\n        insertImage(editor, file.name)\n\n        setTimeout(async () => {\n          const src = await toDataURL(file)\n          setImageStore({\n            ...imageStore,\n            [file.name]: src\n          })\n        }, 3000)\n      }\n    }\n  }\n\n  return <Slate\n      editor={editor}\n      value={value}\n      onChange={newValue => setValue(newValue)}\n    >\n      <Editable\n        onDrop={(a) => [\n          console.log(a)\n        ]}\n        renderElement={(props) => {\n          return <Element {...props} imageStore={imageStore}/>\n        }}\n      />\n    </Slate>\n}\n","import React from \"react\";\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { D1 } from \"./draft/1\";\nimport { D2 } from \"./draft/2\";\nimport { S1 } from \"./slate/1\";\nimport { S2 } from \"./slate/2\";\nimport { D3 } from \"./draft/3\";\nimport { S3 } from \"./slate/3\";\nimport { D4 } from \"./draft/4\";\nimport { S4 } from \"./slate/4\";\n\n\nconst draft = [D1, D2, D3, D4];\nconst slate = [S1, S2, S3, S4];\nconst steps = [\n  'Basic',\n  'Basic Text Formatting',\n  'Block Formatting',\n  'Transient State'\n]\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <table>\n          <thead>\n            <th>\n              <td></td>\n              <td>Slate</td>\n              <td>Draft</td>\n            </th>\n          </thead>\n          <tbody>\n            {steps.map((s, i) => (\n              <tr>\n                <td>{s}</td>\n                <td><Link to={`/D${i + 1}`}>Draft js</Link></td>\n                <td><Link to={`/S${i + 1}`}>Slate js</Link></td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        <Switch>\n          {draft.map((D, i) => (\n            <Route key={`/D${i + 1}`} path={`/D${i + 1}`}>\n              <D />\n            </Route>\n          ))}\n\n          {slate.map((S, i) => (\n            <Route key={`/S${i + 1}`} path={`/S${i + 1}`}>\n              <S />\n            </Route>\n          ))}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ContentState, Editor, EditorState} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\n\nexport function D1() {\n  const [editorState, setEditorState] = React.useState(\n    () => EditorState.createWithContent(ContentState.createFromText('Hello Draft')),\n  );\n\n  return <Editor editorState={editorState} onChange={setEditorState} />;\n}\n","import React, { useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport {ContentState, Editor, EditorState, RichUtils} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\n\nexport function D2() {\n  const [editorState, setEditorState] = React.useState(\n    () => EditorState.createWithContent(ContentState.createFromText('Hello World')),\n  );\n\n  const handleKeyCommand = useCallback((command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      setEditorState(newState);\n      return \"handled\";\n    }\n\n    return \"not-handled\";\n  }, []);\n\n  return <Editor\n    handleKeyCommand={handleKeyCommand}\n    editorState={editorState} onChange={setEditorState}\n  />;\n}\n","import React, { useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport {ContentBlock, ContentState, Editor, EditorState, Modifier, RichUtils, EditorBlock} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\n\nexport function D3() {\n  const [editorState, setEditorState] = React.useState(\n    () => EditorState.createWithContent(ContentState.createFromText('Hello World')),\n  );\n\n  // Modifier.setBlockType(content)\n\n  return <>\n    <button onClick={() => {\n      const selection = editorState.getSelection()\n      const key = selection.getAnchorKey()\n      const content = editorState.getCurrentContent()\n      const block = content.getBlockForKey(key)\n      setEditorState(\n        EditorState.push(\n          editorState,\n          Modifier.setBlockType(\n            editorState.getCurrentContent(),\n            editorState.getSelection(),\n            block.getType() === 'h1' ? \"unstyled\" : 'h1'\n          ),\n          'change-block-type'\n        ),\n      );\n    }}>h1</button>\n    <Editor\n      blockRendererFn={(block) => {\n        console.log('hello', block.getType())\n        if (block.getType() === 'h1') {\n          return {\n            component: (props: any) => {\n              return <h1>\n                <EditorBlock {...props}/>\n              </h1>\n            }\n          }\n        }\n        console.log(block.getType())\n      }}\n      editorState={editorState} onChange={setEditorState}\n    />\n  </>;\n}\n","import React from 'react'\nimport { useMemo, useState } from \"react\"\nimport { Editable, Slate, withReact } from 'slate-react'\nimport { createEditor, Node } from \"slate\"\n\nexport function S1() {\n  const editor = useMemo(() => withReact(createEditor()), [])\n  const [value, setValue] = useState<Node[]>([{\n    children: [{\n      text: 'Hello Slate'\n    }]\n  }])\n  return <Slate\n      editor={editor}\n      value={value}\n      onChange={newValue => setValue(newValue)}\n    >\n      <Editable />\n    </Slate>\n}\n","import React, { CSSProperties, useCallback } from 'react'\nimport { useMemo, useState } from \"react\"\nimport { Editable, RenderElementProps, RenderLeafProps, Slate, withReact } from 'slate-react'\nimport { createEditor, Editor, Node, Transforms } from \"slate\"\n\nexport function S3() {\n  const editor = useMemo(() => withReact(createEditor()), [])\n  const [value, setValue] = useState<Node[]>([{\n    children: [{\n      text: 'Hello Slate'\n    }]\n  }])\n\n  const renderElement = useCallback(({ element, children, ...props}: RenderElementProps) => {\n    if (element.type === 'h1') {\n      return <h1 {...props}>{children}</h1>\n    } else if (element.type === 'h2') {\n      return <h1 {...props}>{children}</h1>\n    } \n\n    return <p {...props}>{children}</p>\n  }, [])\n\n  return <Slate\n      editor={editor}\n      value={value}\n      onChange={newValue => setValue(newValue)}\n    >\n      <button onClick={() => {\n        Transforms.setNodes(editor, { type: 'h1' })\n      }}>\n        h1\n      </button>\n      <Editable\n        renderElement={renderElement}\n      />\n    </Slate>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}