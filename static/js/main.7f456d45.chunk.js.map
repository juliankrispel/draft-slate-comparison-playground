{"version":3,"sources":["slate/2.tsx","utils/toDataUrl.ts","draft/4.tsx","slate/4.tsx","draft/plugins/typography.tsx","slate/plugins/headers.tsx","slate/plugins/typography.tsx","slate/5.tsx","draft/hooks/useBlockMenu.tsx","draft/hooks/useHeaders.tsx","slate/hooks/useTypography.tsx","slate/hooks/useBlockMenu.tsx","slate/hooks/useHeaders.tsx","slate/6.tsx","App.tsx","draft/1.tsx","draft/2.tsx","draft/3.tsx","draft/5.tsx","draft/plugins/headers.tsx","draft/6.tsx","draft/hooks/useTypography.tsx","slate/1.tsx","slate/3.tsx","index.tsx"],"names":["styles","b","fontWeight","i","fontStyle","u","textDecoration","toDataURL","file","a","Promise","resolve","reject","reader","FileReader","addEventListener","result","readAsDataURL","Image","props","block","contentState","key","getEntityAt","data","getEntity","getData","src","alt","name","contentEditable","Element","attributes","children","element","type","ImageElement","imageStore","selected","useSelected","focused","useFocused","entity","className","css","typography","editorState","setEditorState","handleKeyCommand","command","newState","RichUtils","editor","renderLeaf","leaf","rest","text","style","Object","keys","reduce","acc","onKeyDown","metaKey","marks","Editor","removeMark","addMark","usePlugins","plugins","renderElement","useCallback","plugin","content","onBeforeInput","event","options","useBlockMenu","blockRendererFn","getType","component","headers","onMouseDown","console","log","stopPropagation","value","onClick","onChange","EditorState","push","Modifier","setBlockType","getCurrentContent","getSelection","target","map","opt","useEditor","Transforms","setNodes","EditableWithContext","useTypography","draft","React","useState","createWithContent","ContentState","createFromText","getAnchorKey","getBlockForKey","handleDroppedFiles","selection","files","length","entityKey","createEntity","getLastCreatedEntityKey","AtomicBlockUtils","insertAtomicBlock","setTimeout","dataurl","mergeEntityData","convertToRaw","raw","convertFromRaw","blockRenderMap","DefaultDraftBlockRenderMap","merge","_editorState","res","slate","useMemo","withReact","createEditor","setValue","newValue","withHistory","setImageStore","insertData","image","insertNodes","insertImage","onDrop","steps","App","s","to","D","path","S","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAKMA,EAA0C,CAC9CC,EAAG,CAAEC,WAAY,QACjBC,EAAG,CAAEC,UAAW,UAChBC,EAAG,CAAEC,eAAgB,c,mCCRhB,SAAeC,EAAtB,kC,4CAAO,WAAyBC,GAAzB,SAAAC,EAAA,+EACE,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,WAAW,WACjCJ,EAAQE,EAAOG,WAEjBH,EAAOI,cAAcT,GACrBK,EAAOE,iBAAiB,QAASH,GACjCC,EAAOE,iBAAiB,QAASH,OAR9B,4C,sBCKP,SAASM,EAAMC,GACb,IAAMC,EAAQD,EAAMC,MACdC,EAAeF,EAAME,aACrBC,EAAMF,EAAMG,YAAY,GAExBC,EADMH,EAAaI,UAAUH,GAClBI,UACjB,OAAKF,EAAKG,IAKH,8BACL,qBAAKC,IAAKJ,EAAKK,KAAMF,IAAKH,EAAKG,QALxB,sBAAKG,iBAAiB,EAAtB,qBACIN,EAAKK,Q,8OCCpB,IAAME,EAAU,SAACZ,GAAyB,IAChCa,EAAkCb,EAAlCa,WAAYC,EAAsBd,EAAtBc,SAEpB,OAF0Cd,EAAZe,QAEdC,MACd,IAAK,QACH,OAAO,cAAC,EAAD,eAAkBhB,IAC3B,QACE,OAAO,6CAAOa,GAAP,aAAoBC,OAI3BG,EAAe,SAAC,GAAiE,IAA/DJ,EAA8D,EAA9DA,WAAYC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,QAASG,EAA+B,EAA/BA,WAC/CC,EAAWC,cACXC,EAAUC,cACVd,EAAMU,EAAWH,EAAQQ,QAC/B,OAAKf,EAUH,gDAASK,GAAT,cACE,qBAAKF,iBAAiB,EAAtB,SACE,qBACEF,IAAI,MACJD,IAAKA,EACLgB,UAAWC,YAAF,IAION,GAAYE,EAAU,oBAAsB,YAI/DP,MAtBI,gDAASD,GAAT,cACL,qBAAKF,iBAAiB,EAAtB,qBAGCG,OC/BA,IAAMY,EAAiC,SAC5CC,EACAC,GAEA,MAAO,CACLC,iBAAkB,SAACC,EAASH,GAC1B,IAAMI,EAAWC,YAAUH,iBAAiBF,EAAaG,GAEzD,OAAIC,GACFH,EAAeG,GACR,WAGF,iBCbN,ICEDlD,EAA0C,CAC9CC,EAAG,CAAEC,WAAY,QACjBC,EAAG,CAAEC,UAAW,UAChBC,EAAG,CAAEC,eAAgB,cAGVuC,EAAiC,SAACO,GAC7C,MAAO,CACLC,WAAY,SAAClC,GAA4B,IAAD,EACZA,EAAMmC,KAAfC,GADqB,EAC9BC,KAD8B,yBAEhCC,EAAQC,OAAOC,KAAKJ,GAAMK,QAC9B,SAACC,EAAKvC,GAAN,mBAAC,eAAmBuC,GAAQ7D,EAAOsB,MACnC,IAGF,OACE,gDAAUH,EAAMa,YAAhB,IAA4ByB,MAAOA,EAAnC,SACGtC,EAAMc,aAIb6B,UAAW,YAAuB,IAApBxC,EAAmB,EAAnBA,IAAKyC,EAAc,EAAdA,QACXC,EAAQC,IAAOD,MAAMZ,IAAW,GAEvB,MAAXW,GAAkC,MAAf/D,EAAOsB,KAIZ,MAAd0C,EAAM1C,GACR2C,IAAOC,WAAWd,EAAQ9B,GAE1B2C,IAAOE,QAAQf,EAAQ9B,GAAK,OCrBpC,SAAS8C,EAAWC,GAClB,IAAMC,EAAgBC,uBAAY,SAACpD,GAA+B,IAAD,gBAC1CkD,GAD0C,IAC/D,2BAA8B,CAAC,IAApBG,EAAmB,QAC5B,GAA4B,MAAxBA,EAAOF,cAAuB,CAChC,IAAMG,EAAUD,EAAOF,cAAcnD,GACrC,GAAe,MAAXsD,EACF,OAAOA,IALkD,kCASvDxC,EAAsBd,EAAtBc,SAAasB,EAT0C,YASjCpC,EATiC,cAU/D,OAAO,6CAAOoC,GAAP,aAActB,OACpB,CAACoC,IAEEhB,EAAakB,uBAAY,SAACpD,GAAW,IAAD,gBACnBkD,GADmB,IACxC,2BAA8B,CAAC,IAApBG,EAAmB,QAC5B,GAAyB,MAArBA,EAAOnB,WAAoB,CAC7B,IAAMoB,EAAUD,EAAOnB,WAAWlC,GAClC,GAAe,MAAXsD,EACF,OAAOA,IAL2B,kCAShCzC,EAAwBb,EAAxBa,WAAYC,EAAYd,EAAZc,SACpB,OAAO,gDAAUD,GAAV,aAAuBC,OAC7B,CAACoC,IAEEK,EAAgBH,uBAAY,SAACI,GAAW,IAAD,gBACtBN,GADsB,IAC3C,2BAA8B,CAAC,IAApBG,EAAmB,QACA,MAAxBA,EAAOE,eACTF,EAAOE,cAAcC,IAHkB,iCAM1C,CAACN,IAUJ,MAAO,CACLC,gBACAjB,aACAS,UAXgBS,uBAAY,SAACI,GAAW,IAAD,gBAClBN,GADkB,IACvC,2BAA8B,CAAC,IAApBG,EAAmB,QACJ,MAApBA,EAAOV,WACTU,EAAOV,UAAUa,IAHkB,iCAMtC,CAACN,IAMFK,iB,qQCzDJ,IAAME,EAAU,CAAC,KAAM,KAAM,KAAM,YAEtBC,EAAgC,SAAC/B,EAAaC,GAAoB,IACrE+B,ECLD,CACLA,gBAAiB,SAAC1D,GAChB,MAAwB,OAApBA,EAAM2D,UACD,CACLC,UAAW,SAAC7D,GACV,OAAO,6BACL,cAAC,cAAD,eAAiBA,QAIM,OAApBC,EAAM2D,UACR,CACLC,UAAW,SAAC7D,GACV,OAAO,6BACL,cAAC,cAAD,eAAiBA,QAIM,OAApBC,EAAM2D,UACR,CACLC,UAAW,SAAC7D,GACV,OAAO,6BACL,cAAC,cAAD,eAAiBA,aAJlB,IDbH2D,gBAER,MAAO,CACLA,gBAAiB,SAAC1D,GAChB,IAAM6D,EAAUH,EAAgB1D,GAChC,MAAO,CACL4D,UAAW,SAAC7D,GACV,IAAIsD,EAAU,cAAC,cAAD,eAAiBtD,IAK/B,OAJA,OAAI8D,QAAJ,IAAIA,OAAJ,EAAIA,EAASD,aACXP,EAAU,cAACQ,EAAQD,UAAT,eAAuB7D,KAG5B,sBAAKwB,UAAWC,YAAF,KAAd,UAKL,qBACEd,iBAAiB,EACjBa,UAAWC,YAAF,KAFX,SAIE,wBACAsC,YAAa,SAACP,GACZQ,QAAQC,IAAI,oBACZT,EAAMU,mBAGRC,MAAOnE,EAAMC,MAAM2D,UACnBQ,QAAS,SAACZ,GACRQ,QAAQC,IAAI,aAEdI,SAAU,SAACb,GACTQ,QAAQC,IAAI,mBACZrC,EACE0C,cAAYC,KACV5C,EACA6C,WAASC,aACP9C,EAAY+C,oBACZ/C,EAAYgD,eACZnB,EAAMoB,OAAOT,OAEf,uBApBN,SAwBGV,EAAQoB,KAAI,SAAAC,GAAG,OACd,wBAAQX,MAAOW,EAAf,SAA+BA,GAANA,UAI9BxB,UErDb,IAAMzE,EAA0C,CAC9CC,EAAG,CAAEC,WAAY,QACjBC,EAAG,CAAEC,UAAW,UAChBC,EAAG,CAAEC,eAAgB,c,iPCHvB,IAAMsE,EAAU,CAAC,KAAM,KAAM,KAAM,KAEtBC,EAAe,WAC1B,IAAMzB,EAAS8C,cACP5B,ECJD,CACLA,cAAe,SAACnD,GACd,MAA2B,OAAvBA,EAAMe,QAAQC,KACT,8CAAQhB,EAAMa,YAAd,aAA2Bb,EAAMc,YACR,OAAvBd,EAAMe,QAAQC,KAChB,8CAAQhB,EAAMa,YAAd,aAA2Bb,EAAMc,YACR,OAAvBd,EAAMe,QAAQC,KAChB,8CAAQhB,EAAMa,YAAd,aAA2Bb,EAAMc,YAGnC,4BAAId,EAAMc,aDNbqC,cAER,MAAO,CACLA,cAAe,SAAuBnD,GACpC,IAAMsD,EAAUH,EAAcnD,GAE9B,OAAO,sBAAKwB,UAAWC,YAAF,KAAd,UAKL,qBACEd,iBAAiB,EACjBa,UAAWC,YAAF,KAFX,SAIE,wBAAQ0C,MAAOnE,EAAMe,QAAQC,KAAgBqD,SAAU,SAACb,GACtDwB,IAAWC,SAAShD,EAAQ,CAAEjB,KAAMwC,EAAMoB,OAAOT,OAAS,KAD5D,SAIGV,EAAQoB,KAAI,SAAAC,GAAG,OACd,wBAAQX,MAAOW,EAAf,SAA+BA,GAANA,UAI9BxB,QEvBT,SAAS4B,IACP,OAAO,cAAC,IAAD,2BACDxB,KHDwC,WAC9C,IAAMzB,EAAS8C,cACf,MAAO,CACL7C,WAAY,SAAClC,GAA4B,IAAD,EACZA,EAAMmC,KAAfC,GADqB,EAC9BC,KAD8B,yBAEhCC,EAAQC,OAAOC,KAAKJ,GAAMK,QAC9B,SAACC,EAAKvC,GAAN,mBAAC,eAAmBuC,GAAQ7D,EAAOsB,MACnC,IAGF,OACE,gDAAUH,EAAMa,YAAhB,IAA4ByB,MAAOA,EAAnC,SACGtC,EAAMc,aAIb6B,UAAW,YAAuB,IAApBxC,EAAmB,EAAnBA,IAAKyC,EAAc,EAAdA,QACXC,EAAQC,IAAOD,MAAMZ,IAAW,GAEvB,MAAXW,GAAkC,MAAf/D,EAAOsB,KAIZ,MAAd0C,EAAM1C,GACR2C,IAAOC,WAAWd,EAAQ9B,GAE1B2C,IAAOE,QAAQf,EAAQ9B,GAAK,MGxB5BgF,KCQR,IAAMC,EAAQ,CChBP,WAAe,IAAD,EACmBC,IAAMC,UAC1C,kBAAMhB,cAAYiB,kBAAkBC,eAAaC,eAAe,mBAF/C,mBACZ9D,EADY,KACCC,EADD,KAKnB,OAAO,cAAC,SAAD,CAAQD,YAAaA,EAAa0C,SAAUzC,KCL9C,WAAe,IAAD,EACmByD,IAAMC,UAC1C,kBAAMhB,cAAYiB,kBAAkBC,eAAaC,eAAe,mBAF/C,mBACZ9D,EADY,KACCC,EADD,KAKbC,EAAmBuB,uBAAY,SAACtB,EAASH,GAC7C,IAAMI,EAAWC,YAAUH,iBAAiBF,EAAaG,GAEzD,OAAIC,GACFH,EAAeG,GACR,WAGF,gBACN,IAEH,OAAO,cAAC,SAAD,CACLF,iBAAkBA,EAClBF,YAAaA,EAAa0C,SAAUzC,KClBjC,WAAe,IAAD,EACmByD,IAAMC,UAC1C,kBAAMhB,cAAYiB,kBAAkBC,eAAaC,eAAe,mBAF/C,mBACZ9D,EADY,KACCC,EADD,KAOnB,OAAO,qCACL,wBAAQwC,QAAS,WACf,IACMjE,EADYwB,EAAYgD,eACRe,eAEhBzF,EADU0B,EAAY+C,oBACNiB,eAAexF,GACrCyB,EACE0C,cAAYC,KACV5C,EACA6C,WAASC,aACP9C,EAAY+C,oBACZ/C,EAAYgD,eACQ,OAApB1E,EAAM2D,UAAqB,WAAa,MAE1C,uBAbN,gBAiBA,cAAC,SAAD,CACED,gBAAiB,SAAC1D,GAEhB,GADA+D,QAAQC,IAAI,QAAShE,EAAM2D,WACH,OAApB3D,EAAM2D,UACR,MAAO,CACLC,UAAW,SAAC7D,GACV,OAAO,6BACL,cAAC,cAAD,eAAiBA,QAKzBgE,QAAQC,IAAIhE,EAAM2D,YAEpBjC,YAAaA,EAAa0C,SAAUzC,QfvBnC,WAAe,IAAD,EACmByD,IAAMC,UAC1C,kBAAMhB,cAAYiB,kBAAkBC,eAAaC,eAAe,yCAF/C,mBACZ9D,EADY,KACCC,EADD,KAKbgE,EAAqBxC,uBAAY,SAACyC,EAAWC,GACjD,GAAa,MAATA,GAAiBA,EAAMC,OAAS,EAAG,CAAC,IAAD,gBAClBD,GADkB,yBAC1BzG,EAD0B,QAE/Ba,EAAeyB,EAAY+C,oBAUzBsB,GATN9F,EAAeA,EAAa+F,aAC1B,QACA,YACA,CACEvF,KAAMrB,EAAKqB,KACXF,IAAK,QAIsB0F,0BAE/BtE,EAAeuE,mBAAiBC,kBAC9B9B,cAAYC,KACV5C,EACAzB,EACA,gBAEF8F,EACA,MAGFK,WAAU,sBAAC,4BAAA/G,EAAA,sEACaF,EAAUC,GADvB,OACHiH,EADG,OAETpG,EAAaqG,gBACXP,EACA,CAAExF,IAAK8F,IAJA,2CAOR,MA9BL,2BAA2B,IADU,8BAiCrC,MAAO,UAGT,MAAO,gBACN,CAAC3E,IAEEgC,EAAkBP,uBAAY,SAACnD,GACnC,GAAwB,WAApBA,EAAM2D,UACR,MAAO,CACLC,UAAW9D,KAGd,IAMH,OAFAiE,QAAQC,IAAIuC,uBAAa7E,EAAY+C,sBAE9B,cAAC,SAAD,CACLkB,mBAAoBA,EACpBjC,gBAAiBA,EACjBhC,YAAaA,EAAa0C,SAAUzC,KgBTjC,WACL,IAAM6E,EAAM,CACV,OAAU,CACR,CACE,IAAO,IACP,KAAQ,aACR,KAAQ,KACR,MAAS,EACT,kBAAqB,GACrB,aAAgB,GAChB,KAAQ,IAEV,CACE,IAAO,IACP,KAAQ,aACR,KAAQ,KACR,MAAS,EACT,kBAAqB,GACrB,aAAgB,GAChB,KAAQ,IAEV,CACE,IAAO,IACP,KAAQ,eACR,KAAQ,KACR,MAAS,EACT,kBAAqB,GACrB,aAAgB,GAChB,KAAQ,IAEV,CACE,IAAO,IACP,KAAQ,aACR,KAAQ,WACR,MAAS,EACT,kBAAqB,GACrB,aAAgB,GAChB,KAAQ,KAIZ,UAAa,IAzCI,EA4CmBpB,IAAMC,UAC1C,kBAAMhB,cAAYiB,kBAAkBmB,yBAAeD,OA7ClC,mBA4CZ9E,EA5CY,KA4CCC,EA5CD,KAgDnB,OACE,cAAC,SAAD,eAnGe,SAAC,GAIM,IAAD,EAJHD,EAIG,EAJHA,YAAaC,EAIV,EAJUA,eAAgBsB,EAI1B,EAJ0BA,QAK7CyD,EAAiBC,6BADE,cAGF1D,GAHE,IAGvB,2BAA8B,CAAC,IAApBG,EAAmB,QACC,MAAzBA,EAAOsD,gBACTA,EAAeE,MAAMxD,EAAOsD,iBALT,8BASvB,MAAO,CACLhF,cACAgF,iBACAtC,SAHK,SAGIyC,GACP,IADqB,EACjBnF,EAAcmF,EADG,cAEA5D,GAFA,IAErB,2BAA8B,CAAC,IAApBG,EAAmB,QACL,MAAnBA,EAAOgB,WACT1C,EAAc0B,EAAOgB,SAAS1C,KAJb,8BAOrBC,EAAeD,IAEjBE,iBAZK,WAYsB,IAAD,gBACHqB,GADG,IACxB,2BAA8B,CAAC,IAApBG,EAAmB,QAC5B,GAA+B,MAA3BA,EAAOxB,iBAET,GAAY,YADAwB,EAAOxB,iBAAP,MAAAwB,EAAM,WAEhB,MAAO,WALW,8BASxB,MAAO,eAETM,gBAvBK,WAuBqB,IAAD,gBACFT,GADE,IACvB,2BAA8B,CAAC,IAApBG,EAAmB,QAC5B,GAA8B,MAA1BA,EAAOM,gBAAyB,CAClC,IAAMoD,EAAM1D,EAAOM,gBAAP,MAAAN,EAAM,WAClB,GAAW,MAAP0D,EACF,OAAOA,IALU,iCAgEnB9D,CAAW,CACbtB,cACAC,iBACAsB,QAAS,CACPxB,EAAWC,EAAaC,GC3HzB,CACL+B,gBAAiB,SAAC1D,GAEhB,OADA+D,QAAQC,IAAI,QAAShE,EAAM2D,WACH,OAApB3D,EAAM2D,UACD,CACLC,UAAW,SAAC7D,GACV,OAAO,6BACL,cAAC,cAAD,eAAiBA,QAIM,OAApBC,EAAM2D,UACR,CACLC,UAAW,SAAC7D,GACV,OAAO,6BACL,cAAC,cAAD,eAAiBA,QAIM,OAApBC,EAAM2D,UACR,CACLC,UAAW,SAAC7D,GACV,OAAO,6BACL,cAAC,cAAD,eAAiBA,aAJlB,UCdN,WACL,IAAMyG,EAAM,CACV,OAAU,CACR,CACE,IAAO,IACP,KAAQ,aACR,KAAQ,KACR,MAAS,EACT,kBAAqB,GACrB,aAAgB,GAChB,KAAQ,IAEV,CACE,IAAO,IACP,KAAQ,aACR,KAAQ,KACR,MAAS,EACT,kBAAqB,GACrB,aAAgB,GAChB,KAAQ,IAEV,CACE,IAAO,IACP,KAAQ,eACR,KAAQ,KACR,MAAS,EACT,kBAAqB,GACrB,aAAgB,GAChB,KAAQ,IAEV,CACE,IAAO,IACP,KAAQ,aACR,KAAQ,WACR,MAAS,EACT,kBAAqB,GACrB,aAAgB,GAChB,KAAQ,KAIZ,UAAa,IAzCI,EA4CmBpB,IAAMC,UAC1C,kBAAMhB,cAAYiB,kBAAkBmB,yBAAeD,OA7ClC,mBA4CZ9E,EA5CY,KA4CCC,EA5CD,KAgDnB,OAAO,cAAC,SAAD,uCCrDqC,SAAED,EAAaC,GAC3D,MAAO,CACLC,iBAAkB,SAACC,EAASH,GAC1B,IAAMI,EAAWC,YAAUH,iBAAiBF,EAAaG,GAEzD,OAAIC,GACFH,EAAeG,GACR,WAGF,gBD4CLoD,CAAcxD,EAAaC,IAC3B8B,EAAa/B,EAAaC,IAC1B,CAACD,cAAa0C,SAAUzC,ONrC1BoF,EAAQ,CQjBP,WACL,IAAM/E,EAASgF,mBAAQ,kBAAMC,YAAUC,iBAAiB,IADrC,EAEO7B,mBAAiB,CAAC,CAC1CxE,SAAU,CAAC,CACTuB,KAAM,mBAJS,mBAEZ8B,EAFY,KAELiD,EAFK,KAOnB,OAAO,cAAC,IAAD,CACHnF,OAAQA,EACRkC,MAAOA,EACPE,SAAU,SAAAgD,GAAQ,OAAID,EAASC,IAH5B,SAKH,cAAC,IAAD,OtBNC,WACL,IAAMpF,EAASgF,mBAAQ,kBAAMC,YAAUC,iBAAiB,IADrC,EAEO7B,mBAAiB,CAAC,CAC1CxE,SAAU,CAAC,CACTuB,KAAM,mBAJS,mBAEZ8B,EAFY,KAELiD,EAFK,KAQbzE,EAAYS,uBAAY,YAAuB,IAApBjD,EAAmB,EAAnBA,IAAKyC,EAAc,EAAdA,QAC9BC,EAAQC,IAAOD,MAAMZ,IAAW,GAEvB,MAAXW,GAAkC,MAAf/D,EAAOsB,KAIZ,MAAd0C,EAAM1C,GACR2C,IAAOC,WAAWd,EAAQ9B,GAE1B2C,IAAOE,QAAQf,EAAQ9B,GAAK,MAE7B,CAAC8B,IAGEC,EAAakB,uBAAY,SAACpD,GAA4B,IAAD,EAC/BA,EAAMmC,KAAfC,GADwC,EACjDC,KADiD,yBAEnDC,EAAQC,OAAOC,KAAKJ,GAAMK,QAC9B,SAACC,EAAKvC,GAAN,mBAAC,eAAmBuC,GAAQ7D,EAAOsB,MACnC,IAGF,OAAO,gDAAUH,EAAMa,YAAhB,IAA4ByB,MAAOA,EAAnC,SACJtC,EAAMc,cAER,IAIH,OAFAkD,QAAQC,IAAI,CAAEE,UAEP,cAAC,IAAD,CACHlC,OAAQA,EACRkC,MAAOA,EACPE,SAAU,SAAAgD,GAAQ,OAAID,EAASC,IAH5B,SAKH,cAAC,IAAD,CACE1E,UAAWA,EACXT,WAAYA,OuBlDb,WACL,IAAMD,EAASgF,mBAAQ,kBAAMC,YAAUC,iBAAiB,IADrC,EAEO7B,mBAAiB,CAAC,CAC1CxE,SAAU,CAAC,CACTuB,KAAM,mBAJS,mBAEZ8B,EAFY,KAELiD,EAFK,KAQbjE,EAAgBC,uBAAY,YAAyD,IAAtDrC,EAAqD,EAArDA,QAASD,EAA4C,EAA5CA,SAAad,EAA+B,sCACxF,MAAqB,OAAjBe,EAAQC,MAEgB,OAAjBD,EAAQC,KADV,8CAAQhB,GAAR,aAAgBc,KAKlB,6CAAOd,GAAP,aAAec,OACrB,IAEH,OAAO,eAAC,IAAD,CACHmB,OAAQA,EACRkC,MAAOA,EACPE,SAAU,SAAAgD,GAAQ,OAAID,EAASC,IAH5B,UAKH,wBAAQjD,QAAS,WACfY,IAAWC,SAAShD,EAAQ,CAAEjB,KAAM,QADtC,gBAKA,cAAC,IAAD,CACEmC,cAAeA,QpB6BhB,WACL,IAAMlB,EAASgF,mBAAQ,kBAAMC,YAAUI,YAAYH,kBAAkB,IADlD,EAEiB7B,mBAAS,IAF1B,mBAEZpE,EAFY,KAEAqG,EAFA,OAIOjC,mBAAiB,CACzC,CACExE,SAAU,CACR,CACEuB,KAAM,iBAIZ,CACEvB,SAAU,CACR,CACEuB,KAAM,iCAfK,mBAIZ8B,EAJY,KAILiD,EAJK,KA4CnB,OAvBAnF,EAAOuF,WAAa,SAAAnH,GAAS,IACnByF,EAAUzF,EAAVyF,MAER,GAAIA,GAASA,EAAMC,OAAS,EAAG,CAAC,IAAD,gBACVD,GADU,yBAClBzG,EADkB,QAE3BkI,EAAc,2BACTrG,GADQ,kBAEV7B,EAAKqB,KAAO,QAlCH,SAACuB,EAAgBV,GACnC,IACMkG,EAAQ,CAAEzG,KAAM,QAASO,SAAQT,SAAU,CADpC,CAAEuB,KAAM,MAErB2C,IAAW0C,YAAYzF,EAAQwF,GAkCzBE,CAAY1F,EAAQ5C,EAAKqB,MAEzB2F,WAAU,sBAAC,4BAAA/G,EAAA,sEACSF,EAAUC,GADnB,OACHmB,EADG,OAET+G,EAAc,2BACTrG,GADQ,kBAEV7B,EAAKqB,KAAOF,KAJN,2CAMR,MAdL,2BAA2B,IADE,iCAoB1B,cAAC,IAAD,CACHyB,OAAQA,EACRkC,MAAOA,EACPE,SAAU,SAAAgD,GAAQ,OAAID,EAASC,IAH5B,SAKH,cAAC,IAAD,CACEO,OAAQ,SAACtI,GAAD,MAAO,CACb0E,QAAQC,IAAI3E,KAEd6D,cAAe,SAACnD,GACd,OAAO,cAAC,EAAD,2BAAaA,GAAb,IAAoBkB,WAAYA,WInD1C,WACL,IAAMe,EAASgF,mBAAQ,kBAAMC,YAAUC,iBAAiB,IADrC,EAEO7B,mBAAiB,CACzC,CACEtE,KAAM,KACNF,SAAU,CACR,CACEuB,KAAM,gBAIZ,CACErB,KAAM,KACNF,SAAU,CACR,CACEuB,KAAM,gBAIZ,CACErB,KAAM,KACNF,SAAU,CACR,CACEuB,KAAM,kBAIZ,CACErB,KAAM,YACNF,SAAU,CACR,CACEuB,KAAM,sBA/BK,mBAEZ8B,EAFY,KAELiD,EAFK,KAqCblE,EAAU,CFnGT,CACLC,cAAe,SAACnD,GACd,MAA2B,OAAvBA,EAAMe,QAAQC,KACT,8CAAQhB,EAAMa,YAAd,aAA2Bb,EAAMc,YACR,OAAvBd,EAAMe,QAAQC,KAChB,8CAAQhB,EAAMa,YAAd,aAA2Bb,EAAMc,YACR,OAAvBd,EAAMe,QAAQC,KAChB,8CAAQhB,EAAMa,YAAd,aAA2Bb,EAAMc,iBADnC,IE6FuBY,EAAWO,IAE7C,OACE,cAAC,IAAD,CACEA,OAAQA,EACRkC,MAAOA,EACPE,SAAU,SAACgD,GAAD,OAAcD,EAASC,IAHnC,SAKE,cAAC,IAAD,eAAcpE,EAAWC,QM9FxB,WAEL,IAAMjB,EAASgF,mBAAQ,kBAAMC,YAAUC,iBAAiB,IAFrC,EAGO7B,mBAAiB,CACzC,CACEtE,KAAM,KACNF,SAAU,CACR,CACEuB,KAAM,gBAIZ,CACErB,KAAM,KACNF,SAAU,CACR,CACEuB,KAAM,gBAIZ,CACErB,KAAM,KACNF,SAAU,CACR,CACEuB,KAAM,kBAIZ,CACErB,KAAM,YACNF,SAAU,CACR,CACEuB,KAAM,sBAhCK,mBAGZ8B,EAHY,KAGLiD,EAHK,KAsCnB,OAAO,cAAC,IAAD,CACHnF,OAAQA,EACRkC,MAAOA,EACPE,SAAU,SAAAgD,GAAQ,OAAID,EAASC,IAH5B,SAKH,cAACnC,EAAD,QCrCA2C,EAAQ,CACZ,QACA,wBACA,mBACA,kBACA,wBACA,SAGa,SAASC,IACtB,OACE,cAAC,IAAD,UACE,gCACE,kCACE,gCACE,+BACE,uBACA,uCACA,4CAGJ,gCACGD,EAAMhD,KAAI,SAACkD,EAAG/I,GAAJ,OACT,+BACE,6BAAK+I,IACL,6BAAI,cAAC,IAAD,CAAMC,GAAE,YAAOhJ,EAAI,GAAnB,wBACJ,6BAAI,cAAC,IAAD,CAAMgJ,GAAE,YAAOhJ,EAAI,GAAnB,mCAMZ,eAAC,IAAD,WACGoG,EAAMP,KAAI,SAACoD,EAAGjJ,GAAJ,OACT,cAAC,IAAD,CAA0BkJ,KAAI,YAAOlJ,EAAI,GAAzC,SACE,cAACiJ,EAAD,KADF,YAAiBjJ,EAAI,OAKtBgI,EAAMnC,KAAI,SAACsD,EAAGnJ,GAAJ,OACT,cAAC,IAAD,CAA0BkJ,KAAI,YAAOlJ,EAAI,GAAzC,SACE,cAACmJ,EAAD,KADF,YAAiBnJ,EAAI,eU1DjCoJ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7f456d45.chunk.js","sourcesContent":["import React, { CSSProperties, useCallback } from 'react'\nimport { useMemo, useState } from \"react\"\nimport { Editable, RenderLeafProps, Slate, withReact } from 'slate-react'\nimport { createEditor, Editor, Node } from \"slate\"\n\nconst styles: {[key: string]: CSSProperties } = {\n  b: { fontWeight: 'bold' },\n  i: { fontStyle: 'italic' },\n  u: { textDecoration: 'underline' }\n}\n\nexport function S2() {\n  const editor = useMemo(() => withReact(createEditor()), [])\n  const [value, setValue] = useState<Node[]>([{\n    children: [{\n      text: 'Hello Slate'\n    }]\n  }])\n\n  const onKeyDown = useCallback(({ key, metaKey }) => {\n    const marks = Editor.marks(editor) || {}\n\n    if (metaKey == null || styles[key] == null) {\n      return\n    }\n\n    if (marks[key] != null) {\n      Editor.removeMark(editor, key)\n    } else {\n      Editor.addMark(editor, key, true)\n    }\n  }, [editor]);\n\n\n  const renderLeaf = useCallback((props: RenderLeafProps) => {\n    const { text, ...rest } = props.leaf\n    const style = Object.keys(rest).reduce(\n      (acc, key) => ({ ...acc, ...styles[key] }),\n      {}\n    );\n\n    return <span {...props.attributes} style={style}>\n      {props.children}\n    </span>\n  }, [])\n\n  console.log({ value })\n\n  return <Slate\n      editor={editor}\n      value={value}\n      onChange={newValue => setValue(newValue)}\n    >\n      <Editable\n        onKeyDown={onKeyDown}\n        renderLeaf={renderLeaf}\n      />\n    </Slate>\n}\n","export async function toDataURL(file: File) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n    reader.addEventListener('loadend', () => {\n      resolve(reader.result)\n    })\n    reader.readAsDataURL(file)\n    reader.addEventListener('abort', reject)\n    reader.addEventListener('error', reject)\n  })\n}\n","import React, { useCallback } from 'react';\nimport {ContentState, Editor, EditorState, DraftHandleValue, AtomicBlockUtils, ContentBlock, convertToRaw} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { toDataURL } from '../utils/toDataUrl';\n\nfunction Image(props: any) {\n  const block = props.block as ContentBlock\n  const contentState = props.contentState as ContentState\n  const key = block.getEntityAt(0)\n  const ent = contentState.getEntity(key)\n  const data = ent.getData()\n  if (!data.src) {\n    return <div contentEditable={false}>\n      Loading {data.name}\n    </div>\n  }\n  return <div>\n    <img alt={data.name} src={data.src}/>\n  </div>\n}\n\nexport function D4() {\n  const [editorState, setEditorState] = React.useState(\n    () => EditorState.createWithContent(ContentState.createFromText('Hello there\\nDrop an image please')),\n  );\n\n  const handleDroppedFiles = useCallback((selection, files: File[]) => {\n    if (files != null && files.length > 0) {\n      for (const file of files) {\n        let contentState = editorState.getCurrentContent()\n        contentState = contentState.createEntity(\n          'image',\n          'IMMUTABLE',\n          {\n            name: file.name,\n            src: null\n          }\n        )\n\n        const entityKey = contentState.getLastCreatedEntityKey()\n\n        setEditorState(AtomicBlockUtils.insertAtomicBlock(\n          EditorState.push(\n            editorState,\n            contentState,\n            'apply-entity'\n          ),\n          entityKey,\n          ' '\n        ))\n\n        setTimeout(async () => {\n          const dataurl = await toDataURL(file)\n          contentState.mergeEntityData(\n            entityKey,\n            { src: dataurl}\n          )\n          // just wrapping this in a timeout for demo purposes\n        }, 2000)\n      }\n      return 'handled'\n    }\n\n    return 'not-handled' as DraftHandleValue\n  }, [editorState])\n\n  const blockRendererFn = useCallback((block) => {\n    if (block.getType() === \"atomic\") {\n      return {\n        component: Image,\n      };\n    }\n  }, []);\n\n  // Modifier.setBlockType(content)\n  \n  console.log(convertToRaw(editorState.getCurrentContent()))\n\n  return <Editor\n    handleDroppedFiles={handleDroppedFiles}\n    blockRendererFn={blockRendererFn}\n    editorState={editorState} onChange={setEditorState}\n  />\n}\n","import React, {  } from 'react'\nimport { useMemo, useState } from \"react\"\nimport { Editable, RenderElementProps, Slate, useFocused, useSelected, withReact } from 'slate-react'\nimport { createEditor, Editor, Node, Transforms } from \"slate\"\nimport { withHistory } from 'slate-history'\nimport { css } from '@emotion/css'\nimport { toDataURL } from '../utils/toDataUrl'\n\ntype ElementProps = RenderElementProps & {\n  imageStore: {\n    [key: string]: string | null\n  }\n}\n\nconst Element = (props: ElementProps) => {\n  const { attributes, children, element } = props\n\n  switch (element.type) {\n    case 'image':\n      return <ImageElement {...props} />\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst ImageElement = ({ attributes, children, element, imageStore }: ElementProps) => {\n  const selected = useSelected()\n  const focused = useFocused()\n  const src = imageStore[element.entity as string]\n  if (!src) {\n    return <div {...attributes}>\n      <div contentEditable={false}>\n        Loading\n      </div>\n      {children}\n    </div>\n  }\n\n  return (\n    <div {...attributes}>\n      <div contentEditable={false}>\n        <img\n          alt=\"Cat\"\n          src={src}\n          className={css`\n            display: block;\n            max-width: 100%;\n            max-height: 20em;\n            box-shadow: ${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'};\n          `}\n        />\n      </div>\n      {children}\n    </div>\n  )\n}\n\nconst insertImage = (editor: Editor, entity: string) => {\n  const text = { text: '' }\n  const image = { type: 'image', entity, children: [text] }\n  Transforms.insertNodes(editor, image)\n}\n\nexport function S4() {\n  const editor = useMemo(() => withReact(withHistory(createEditor())), [])\n  const [imageStore, setImageStore] = useState({})\n\n  const [value, setValue] = useState<Node[]>([\n    {\n      children: [\n        {\n          text: \"Hello there\",\n        },\n      ],\n    },\n    {\n      children: [\n        {\n          text: \"Drop an image here please\",\n        },\n      ],\n    },\n  ]);\n\n  editor.insertData = data => {\n    const { files } = data\n\n    if (files && files.length > 0) {\n      for (const file of files) {\n        setImageStore({\n          ...imageStore,\n          [file.name]: null\n        })\n\n        insertImage(editor, file.name)\n\n        setTimeout(async () => {\n          const src = await toDataURL(file)\n          setImageStore({\n            ...imageStore,\n            [file.name]: src\n          })\n        }, 3000)\n      }\n    }\n  }\n\n  return <Slate\n      editor={editor}\n      value={value}\n      onChange={newValue => setValue(newValue)}\n    >\n      <Editable\n        onDrop={(a) => [\n          console.log(a)\n        ]}\n        renderElement={(props) => {\n          return <Element {...props} imageStore={imageStore}/>\n        }}\n      />\n    </Slate>\n}\n","import { RichUtils } from \"draft-js\";\nimport {  DraftPluginFactory } from \"../5\";\n\nexport const typography: DraftPluginFactory = (\n  editorState,\n  setEditorState\n) => {\n  return {\n    handleKeyCommand: (command, editorState) => {\n      const newState = RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        setEditorState(newState);\n        return \"handled\";\n      }\n\n      return \"not-handled\";\n    }\n  }\n}\n","import { RenderElementProps } from \"slate-react\";\nimport { SlatePlugin, SlatePluginFactory } from \"../5\";\n\nexport const headers: SlatePluginFactory = (editor) => {\n  return {\n    renderElement: (props) => {\n      if (props.element.type === 'h1') {\n        return <h1 {...props.attributes}>{props.children}</h1>\n      } else if (props.element.type === 'h2') {\n        return <h2 {...props.attributes}>{props.children}</h2>\n      } else if (props.element.type === 'h3') {\n        return <h3 {...props.attributes}>{props.children}</h3>\n      }\n    }\n  }\n}\n","import { CSSProperties } from \"react\";\nimport { Editor } from \"slate\";\nimport { RenderLeafProps } from \"slate-react\";\nimport { SlatePluginFactory } from \"../5\";\n\nconst styles: {[key: string]: CSSProperties } = {\n  b: { fontWeight: 'bold' },\n  i: { fontStyle: 'italic' },\n  u: { textDecoration: 'underline' }\n}\n\nexport const typography: SlatePluginFactory = (editor) => {\n  return {\n    renderLeaf: (props: RenderLeafProps) => {\n      const { text, ...rest } = props.leaf;\n      const style = Object.keys(rest).reduce(\n        (acc, key) => ({ ...acc, ...styles[key] }),\n        {}\n      );\n\n      return (\n        <span {...props.attributes} style={style}>\n          {props.children}\n        </span>\n      );\n    },\n    onKeyDown: ({ key, metaKey }) => {\n      const marks = Editor.marks(editor) || {};\n\n      if (metaKey == null || styles[key] == null) {\n        return;\n      }\n\n      if (marks[key] != null) {\n        Editor.removeMark(editor, key);\n      } else {\n        Editor.addMark(editor, key, true);\n      }\n    },\n  };\n}\n","import React, { FormEvent, useCallback } from 'react'\nimport { useMemo, useState } from \"react\"\nimport { Editable, Slate, withReact } from 'slate-react'\nimport { createEditor, Editor, Node } from \"slate\"\nimport { EditableProps, RenderElementProps, RenderLeafProps } from 'slate-react/dist/components/editable'\nimport { headers } from './plugins/headers'\nimport { typography } from './plugins/typography'\n\nexport type SlatePlugin = Omit<EditableProps, \"renderElement\" | \"renderLeaf\">  & {\n  renderElement?: (props: RenderElementProps) => void | JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => void | JSX.Element\n}\n\nexport type SlatePluginFactory = (editor: Editor) => SlatePlugin\n\nfunction usePlugins(plugins: SlatePlugin[]) {\n  const renderElement = useCallback((props: RenderElementProps) => {\n    for (const plugin of plugins) {\n      if (plugin.renderElement != null) {\n        const content = plugin.renderElement(props)\n        if (content != null) {\n          return content\n        }\n      }\n    }\n    const { children, ...rest } = props\n    return <p {...rest}>{children}</p>\n  }, [plugins])\n\n  const renderLeaf = useCallback((props) => {\n    for (const plugin of plugins) {\n      if (plugin.renderLeaf != null) {\n        const content = plugin.renderLeaf(props)\n        if (content != null) {\n          return content\n        }\n      }\n    }\n    const { attributes, children} = props\n    return <span {...attributes}>{children}</span>\n  }, [plugins])\n\n  const onBeforeInput = useCallback((event) => {\n    for (const plugin of plugins) {\n      if (plugin.onBeforeInput != null) {\n        plugin.onBeforeInput(event)\n      }\n    }\n  }, [plugins])\n\n  const onKeyDown = useCallback((event) => {\n    for (const plugin of plugins) {\n      if (plugin.onKeyDown != null) {\n        plugin.onKeyDown(event)\n      }\n    }\n  }, [plugins])\n\n  return {\n    renderElement,\n    renderLeaf,\n    onKeyDown,\n    onBeforeInput,\n  }\n}\n\nexport function S5() {\n  const editor = useMemo(() => withReact(createEditor()), [])\n  const [value, setValue] = useState<Node[]>([\n    {\n      type: \"h1\",\n      children: [\n        {\n          text: \"header one\",\n        },\n      ],\n    },\n    {\n      type: \"h2\",\n      children: [\n        {\n          text: \"header two\",\n        },\n      ],\n    },\n    {\n      type: \"h3\",\n      children: [\n        {\n          text: \"header three\",\n        },\n      ],\n    },\n    {\n      type: \"paragraph\",\n      children: [\n        {\n          text: \"Just body text\",\n        },\n      ],\n    }\n  ]);\n\n  const plugins = [headers(editor), typography(editor)]\n\n  return (\n    <Slate\n      editor={editor}\n      value={value}\n      onChange={(newValue) => setValue(newValue)}\n    >\n      <Editable {...usePlugins(plugins)} />\n    </Slate>\n  );\n}\n","import { css } from \"@emotion/css\"\nimport { ContentBlock, EditorBlock, EditorState, Modifier } from \"draft-js\"\nimport { DraftEditorHook } from \"../6\"\nimport { useHeaders } from \"./useHeaders\"\n\nconst options = ['h1', 'h2', 'h3', 'unstyled']\n\nexport const useBlockMenu: DraftEditorHook = (editorState, setEditorState) => {\n  const { blockRendererFn } = useHeaders()\n\n  return {\n    blockRendererFn: (block: ContentBlock) => {\n      const headers = blockRendererFn(block)\n      return {\n        component: (props: { block: ContentBlock }) => {\n          let content = <EditorBlock {...props} />\n          if (headers?.component) {\n            content = <headers.component {...props} />\n          }\n\n          return <div className={css`\n            position: relative;\n            align-items: center;\n            display: flex;\n          `}>\n            <div\n              contentEditable={false}\n              className={css`\n              `}>\n              <select\n              onMouseDown={(event) => {\n                console.log('is this reached?')\n                event.stopPropagation()\n                //event.stopPropagation()\n              }}\n              value={props.block.getType()}\n              onClick={(event) => {\n                console.log('on click')\n              }}\n              onChange={(event) => {\n                console.log('what about this')\n                setEditorState(\n                  EditorState.push(\n                    editorState,\n                    Modifier.setBlockType(\n                      editorState.getCurrentContent(),\n                      editorState.getSelection(),\n                      event.target.value\n                    ),\n                    'change-block-type'\n                  ),\n                );\n              }}>\n                {options.map(opt => (\n                  <option value={opt} key={opt}>{opt}</option>\n                ))}\n              </select>\n            </div>\n            {content}\n          </div>\n        }\n      }\n    }\n  }\n}\n","import { ContentBlock, EditorBlock } from \"draft-js\"\n\nexport const useHeaders = () => {\n  return {\n    blockRendererFn: (block: ContentBlock) => {\n      if (block.getType() === 'h1') {\n        return {\n          component: (props: any) => {\n            return <h1>\n              <EditorBlock {...props}/>\n            </h1>\n          }\n        }\n      } else if (block.getType() === 'h2') {\n        return {\n          component: (props: any) => {\n            return <h2>\n              <EditorBlock {...props}/>\n            </h2>\n          }\n        }\n      } else if (block.getType() === 'h3') {\n        return {\n          component: (props: any) => {\n            return <h3>\n              <EditorBlock {...props}/>\n            </h3>\n          }\n        }\n      }\n    }\n  }\n}\n","import { CSSProperties } from \"react\";\nimport { Editor } from \"slate\";\nimport { RenderLeafProps, useEditor } from \"slate-react\";\nimport { EditablePropsHook } from \"../6\";\n\nconst styles: {[key: string]: CSSProperties } = {\n  b: { fontWeight: 'bold' },\n  i: { fontStyle: 'italic' },\n  u: { textDecoration: 'underline' }\n}\n\nexport const useTypography: EditablePropsHook = () => {\n  const editor = useEditor()\n  return {\n    renderLeaf: (props: RenderLeafProps) => {\n      const { text, ...rest } = props.leaf;\n      const style = Object.keys(rest).reduce(\n        (acc, key) => ({ ...acc, ...styles[key] }),\n        {}\n      );\n\n      return (\n        <span {...props.attributes} style={style}>\n          {props.children}\n        </span>\n      );\n    },\n    onKeyDown: ({ key, metaKey }) => {\n      const marks = Editor.marks(editor) || {};\n\n      if (metaKey == null || styles[key] == null) {\n        return;\n      }\n\n      if (marks[key] != null) {\n        Editor.removeMark(editor, key);\n      } else {\n        Editor.addMark(editor, key, true);\n      }\n    },\n  };\n}\n","import { css } from \"@emotion/css\"\nimport { Transforms } from \"slate\"\nimport { RenderElementProps, useEditor } from \"slate-react\"\nimport { useHeaders } from \"./useHeaders\"\n\nconst options = ['h1', 'h2', 'h3', 'p']\n\nexport const useBlockMenu = () => {\n  const editor = useEditor()\n  const { renderElement } = useHeaders(editor)\n\n  return {\n    renderElement: function RenderElement(props: RenderElementProps)  {\n      const content = renderElement(props)\n      \n      return <div className={css`\n        position: relative;\n        align-items: center;\n        display: flex;\n      `}>\n        <div\n          contentEditable={false}\n          className={css`\n          `}>\n          <select value={props.element.type as string} onChange={(event) => {\n            Transforms.setNodes(editor, { type: event.target.value }, {\n            })\n          }}>\n            {options.map(opt => (\n              <option value={opt} key={opt}>{opt}</option>\n            ))}\n          </select>\n        </div>\n        {content}\n      </div>\n    }\n  }\n}\n","import { Editor } from \"slate\"\nimport { RenderElementProps } from \"slate-react\"\nimport { EditablePropsHook } from \"../6\"\n\nexport const useHeaders = (editor: Editor) => {\n  return {\n    renderElement: (props: RenderElementProps) => {\n      if (props.element.type === 'h1') {\n        return <h1 {...props.attributes}>{props.children}</h1>\n      } else if (props.element.type === 'h2') {\n        return <h2 {...props.attributes}>{props.children}</h2>\n      } else if (props.element.type === 'h3') {\n        return <h3 {...props.attributes}>{props.children}</h3>\n      }\n\n      return <p>{props.children}</p>\n    }\n  }\n}\n\n","import React from 'react'\nimport { useMemo, useState } from \"react\"\nimport { Editable, Slate, withReact } from 'slate-react'\nimport { createEditor, Editor, Node } from \"slate\"\nimport { EditableProps } from 'slate-react/dist/components/editable'\nimport { useTypography } from './hooks/useTypography'\nimport { useBlockMenu } from './hooks/useBlockMenu'\n\nexport type EditablePropsHook = () => EditableProps\n\nfunction EditableWithContext() {\n  return <Editable\n    {...useBlockMenu()}\n    {...useTypography()}\n  />\n}\n\nexport function S6() {\n\n  const editor = useMemo(() => withReact(createEditor()), [])\n  const [value, setValue] = useState<Node[]>([\n    {\n      type: \"h1\",\n      children: [\n        {\n          text: \"header one\",\n        },\n      ],\n    },\n    {\n      type: \"h2\",\n      children: [\n        {\n          text: \"header two\",\n        },\n      ],\n    },\n    {\n      type: \"h3\",\n      children: [\n        {\n          text: \"header three\",\n        },\n      ],\n    },\n    {\n      type: \"paragraph\",\n      children: [\n        {\n          text: \"Just body text\",\n        },\n      ],\n    }\n  ]);\n  \n  return <Slate\n      editor={editor}\n      value={value}\n      onChange={newValue => setValue(newValue)}\n    >\n      <EditableWithContext />\n    </Slate>\n}\n","import React from \"react\";\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { D1 } from \"./draft/1\";\nimport { D2 } from \"./draft/2\";\nimport { S1 } from \"./slate/1\";\nimport { S2 } from \"./slate/2\";\nimport { D3 } from \"./draft/3\";\nimport { S3 } from \"./slate/3\";\nimport { D4 } from \"./draft/4\";\nimport { S4 } from \"./slate/4\";\nimport { D5 } from \"./draft/5\";\nimport { S5 } from \"./slate/5\";\nimport { D6 } from \"./draft/6\";\nimport { S6 } from \"./slate/6\";\n\nconst draft = [D1, D2, D3, D4, D5, D6];\nconst slate = [S1, S2, S3, S4, S5, S6];\nconst steps = [\n  'Basic',\n  'Basic Text Formatting',\n  'Block Formatting',\n  'Transient State',\n  'Plugin Implementation',\n  'Hooks',\n]\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <table>\n          <thead>\n            <th>\n              <td></td>\n              <td>Slate</td>\n              <td>Draft</td>\n            </th>\n          </thead>\n          <tbody>\n            {steps.map((s, i) => (\n              <tr>\n                <td>{s}</td>\n                <td><Link to={`/D${i + 1}`}>Draft js</Link></td>\n                <td><Link to={`/S${i + 1}`}>Slate js</Link></td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        <Switch>\n          {draft.map((D, i) => (\n            <Route key={`/D${i + 1}`} path={`/D${i + 1}`}>\n              <D />\n            </Route>\n          ))}\n\n          {slate.map((S, i) => (\n            <Route key={`/S${i + 1}`} path={`/S${i + 1}`}>\n              <S />\n            </Route>\n          ))}\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ContentState, Editor, EditorState} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\n\nexport function D1() {\n  const [editorState, setEditorState] = React.useState(\n    () => EditorState.createWithContent(ContentState.createFromText('Hello Draft')),\n  );\n\n  return <Editor editorState={editorState} onChange={setEditorState} />;\n}\n","import React, { useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport {ContentState, Editor, EditorState, RichUtils} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\n\nexport function D2() {\n  const [editorState, setEditorState] = React.useState(\n    () => EditorState.createWithContent(ContentState.createFromText('Hello World')),\n  );\n\n  const handleKeyCommand = useCallback((command, editorState) => {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n\n    if (newState) {\n      setEditorState(newState);\n      return \"handled\";\n    }\n\n    return \"not-handled\";\n  }, []);\n\n  return <Editor\n    handleKeyCommand={handleKeyCommand}\n    editorState={editorState} onChange={setEditorState}\n  />;\n}\n","import React, { useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport {ContentBlock, ContentState, Editor, EditorState, Modifier, RichUtils, EditorBlock} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\n\nexport function D3() {\n  const [editorState, setEditorState] = React.useState(\n    () => EditorState.createWithContent(ContentState.createFromText('Hello World')),\n  );\n\n  // Modifier.setBlockType(content)\n\n  return <>\n    <button onClick={() => {\n      const selection = editorState.getSelection()\n      const key = selection.getAnchorKey()\n      const content = editorState.getCurrentContent()\n      const block = content.getBlockForKey(key)\n      setEditorState(\n        EditorState.push(\n          editorState,\n          Modifier.setBlockType(\n            editorState.getCurrentContent(),\n            editorState.getSelection(),\n            block.getType() === 'h1' ? \"unstyled\" : 'h1'\n          ),\n          'change-block-type'\n        ),\n      );\n    }}>h1</button>\n    <Editor\n      blockRendererFn={(block) => {\n        console.log('hello', block.getType())\n        if (block.getType() === 'h1') {\n          return {\n            component: (props: any) => {\n              return <h1>\n                <EditorBlock {...props}/>\n              </h1>\n            }\n          }\n        }\n        console.log(block.getType())\n      }}\n      editorState={editorState} onChange={setEditorState}\n    />\n  </>;\n}\n","import React, { useCallback } from 'react';\nimport {\n  ContentState,\n  Editor,\n  EditorState,\n  DefaultDraftBlockRenderMap,\n  convertToRaw,\n  convertFromRaw,\n} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { typography } from './plugins/typography';\nimport { headers } from './plugins/headers';\n\nexport type DraftPlugin = Omit<Draft.EditorProps, \"editorState\" | \"onChange\"> & {\n  onChange?: (editorState: EditorState) => EditorState\n}\n\nexport type DraftPluginFactory = (\n  editorState: EditorState,\n  setEditorState: Draft.EditorProps[\"onChange\"],\n) => DraftPlugin\n\nconst usePlugins = ({ editorState, setEditorState, plugins }: {\n  editorState: EditorState,\n  setEditorState: Draft.EditorProps[\"onChange\"],\n  plugins: DraftPlugin[],\n}): Draft.EditorProps => {\n  let blockRenderMap = DefaultDraftBlockRenderMap\n\n  for (const plugin of plugins) {\n    if (plugin.blockRenderMap != null) {\n      blockRenderMap.merge(plugin.blockRenderMap)\n    }\n  }\n\n  return {\n    editorState,\n    blockRenderMap,\n    onChange(_editorState) {\n      let editorState = _editorState\n      for (const plugin of plugins) {\n        if (plugin.onChange != null) {\n          editorState = plugin.onChange(editorState)\n        }\n      }\n      setEditorState(editorState)\n    },\n    handleKeyCommand(...args) {\n      for (const plugin of plugins) {\n        if (plugin.handleKeyCommand != null) {\n          const res = plugin.handleKeyCommand(...args)\n          if (res === 'handled') {\n            return 'handled'\n          }\n        }\n      }\n      return 'not-handled'\n    },\n    blockRendererFn(...args) {\n      for (const plugin of plugins) {\n        if (plugin.blockRendererFn != null) {\n          const res = plugin.blockRendererFn(...args)\n          if (res != null) {\n            return res\n          }\n        }\n      }\n    },\n\n  };\n};\n\nexport function D5() {\n  const raw = {\n    \"blocks\": [\n      {\n        \"key\": \"1\",\n        \"text\": \"Header One\",\n        \"type\": \"h1\",\n        \"depth\": 0,\n        \"inlineStyleRanges\": [],\n        \"entityRanges\": [],\n        \"data\": {}\n      },\n      {\n        \"key\": \"2\",\n        \"text\": \"Header Two\",\n        \"type\": \"h2\",\n        \"depth\": 0,\n        \"inlineStyleRanges\": [],\n        \"entityRanges\": [],\n        \"data\": {}\n      },\n      {\n        \"key\": \"3\",\n        \"text\": \"Header Three\",\n        \"type\": \"h3\",\n        \"depth\": 0,\n        \"inlineStyleRanges\": [],\n        \"entityRanges\": [],\n        \"data\": {}\n      },\n      {\n        \"key\": \"4\",\n        \"text\": \"Plain Text\",\n        \"type\": \"unstyled\",\n        \"depth\": 0,\n        \"inlineStyleRanges\": [],\n        \"entityRanges\": [],\n        \"data\": {}\n      }\n\n    ],\n    \"entityMap\": {}\n  }\n\n  const [editorState, setEditorState] = React.useState(\n    () => EditorState.createWithContent(convertFromRaw(raw)),\n  );\n\n  return (\n    <Editor\n      {...usePlugins({\n        editorState,\n        setEditorState,\n        plugins: [\n          typography(editorState, setEditorState),\n          headers(),\n        ],\n      })}\n    />\n  );\n}\n","import { ContentBlock, EditorBlock } from \"draft-js\"\n\nexport function headers() {\n  return {\n    blockRendererFn: (block: ContentBlock) => {\n      console.log('hello', block.getType())\n      if (block.getType() === 'h1') {\n        return {\n          component: (props: any) => {\n            return <h1>\n              <EditorBlock {...props}/>\n            </h1>\n          }\n        }\n      } else if (block.getType() === 'h2') {\n        return {\n          component: (props: any) => {\n            return <h2>\n              <EditorBlock {...props}/>\n            </h2>\n          }\n        }\n      } else if (block.getType() === 'h3') {\n        return {\n          component: (props: any) => {\n            return <h3>\n              <EditorBlock {...props}/>\n            </h3>\n          }\n        }\n      }\n    }\n  }\n}\n","import React from 'react';\nimport {convertFromRaw, Editor, EditorProps, EditorState} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport { useTypography } from './hooks/useTypography';\nimport { useBlockMenu } from './hooks/useBlockMenu';\n\nexport type DraftEditorHook = (editorState: EditorState, setEditorState: EditorProps[\"onChange\"]) => Omit<EditorProps, \"editorState\" | \"onChange\">\n\nexport function D6() {\n  const raw = {\n    \"blocks\": [\n      {\n        \"key\": \"1\",\n        \"text\": \"Header One\",\n        \"type\": \"h1\",\n        \"depth\": 0,\n        \"inlineStyleRanges\": [],\n        \"entityRanges\": [],\n        \"data\": {}\n      },\n      {\n        \"key\": \"2\",\n        \"text\": \"Header Two\",\n        \"type\": \"h2\",\n        \"depth\": 0,\n        \"inlineStyleRanges\": [],\n        \"entityRanges\": [],\n        \"data\": {}\n      },\n      {\n        \"key\": \"3\",\n        \"text\": \"Header Three\",\n        \"type\": \"h3\",\n        \"depth\": 0,\n        \"inlineStyleRanges\": [],\n        \"entityRanges\": [],\n        \"data\": {}\n      },\n      {\n        \"key\": \"4\",\n        \"text\": \"Plain Text\",\n        \"type\": \"unstyled\",\n        \"depth\": 0,\n        \"inlineStyleRanges\": [],\n        \"entityRanges\": [],\n        \"data\": {}\n      }\n\n    ],\n    \"entityMap\": {}\n  }\n\n  const [editorState, setEditorState] = React.useState(\n    () => EditorState.createWithContent(convertFromRaw(raw)),\n  );\n\n  return <Editor\n    {...useTypography(editorState, setEditorState)}\n    {...useBlockMenu(editorState, setEditorState)}\n    {...{editorState, onChange: setEditorState}}\n  />;\n}\n","import { RichUtils } from \"draft-js\";\nimport { DraftEditorHook } from \"../6\";\n\nexport const useTypography: DraftEditorHook = ( editorState, setEditorState) => {\n  return {\n    handleKeyCommand: (command, editorState) => {\n      const newState = RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        setEditorState(newState);\n        return \"handled\";\n      }\n\n      return \"not-handled\";\n    }\n  }\n}\n","import React from 'react'\nimport { useMemo, useState } from \"react\"\nimport { Editable, Slate, withReact } from 'slate-react'\nimport { createEditor, Node } from \"slate\"\n\nexport function S1() {\n  const editor = useMemo(() => withReact(createEditor()), [])\n  const [value, setValue] = useState<Node[]>([{\n    children: [{\n      text: 'Hello Slate'\n    }]\n  }])\n  return <Slate\n      editor={editor}\n      value={value}\n      onChange={newValue => setValue(newValue)}\n    >\n      <Editable />\n    </Slate>\n}\n","import React, { CSSProperties, useCallback } from 'react'\nimport { useMemo, useState } from \"react\"\nimport { Editable, RenderElementProps, RenderLeafProps, Slate, withReact } from 'slate-react'\nimport { createEditor, Editor, Node, Transforms } from \"slate\"\n\nexport function S3() {\n  const editor = useMemo(() => withReact(createEditor()), [])\n  const [value, setValue] = useState<Node[]>([{\n    children: [{\n      text: 'Hello Slate'\n    }]\n  }])\n\n  const renderElement = useCallback(({ element, children, ...props}: RenderElementProps) => {\n    if (element.type === 'h1') {\n      return <h1 {...props}>{children}</h1>\n    } else if (element.type === 'h2') {\n      return <h1 {...props}>{children}</h1>\n    } \n\n    return <p {...props}>{children}</p>\n  }, [])\n\n  return <Slate\n      editor={editor}\n      value={value}\n      onChange={newValue => setValue(newValue)}\n    >\n      <button onClick={() => {\n        Transforms.setNodes(editor, { type: 'h1' })\n      }}>\n        h1\n      </button>\n      <Editable\n        renderElement={renderElement}\n      />\n    </Slate>\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}